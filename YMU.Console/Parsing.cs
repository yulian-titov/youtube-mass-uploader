using System.IO;
using System.Linq;
using YMU.Parsing;
using YMU.Api;

/// <summary>
/// This namespace allows uploading a set of videos on different YouTube channels via specifically designed console application and its XML configuration file.
/// </summary>
namespace YMU.Console {
    /// <summary>
    /// Performs parsing of XML configuration which contains all required data to upload a set of videos to different YouTube channels.
    /// </summary>
    public static class ParseXml {

        /// <summary>
        /// Loads all data about all videos which must be uploaded from configuration file.
        /// </summary>
        /// <param name="path">Path to the configuration file.</param>
        /// <returns>Data represented as nodes.</returns>
        public static UploadNode FromFile(string path) {
            if(File.Exists(path)) {
                return FromText(File.ReadAllText(path));
            } else {
                System.Console.WriteLine($"File not found: '{path}'!");
                return new UploadNode();
            }
        }

        /// <summary>
        /// Loads all data about all videos which must be uploaded from text string.
        /// </summary>
        /// <param name="path">String which contains XML data.</param>
        /// <returns>Data represented as nodes.</returns>
        public static UploadNode FromText(string text) {
            if(string.IsNullOrEmpty(text)) {
                System.Console.WriteLine($"Text which must be parsed is empty!");
                return new UploadNode();
            }

            return new DeserializerXml()
                .Register<UploadNode>("upload")
                .Register<VideoNode>("video")
                .Register<ChannelNode>("channel")
                .Register<TitleNode>("title")
                .Register<DescriptionNode>("description")
                .Register<ThumbnailNode>("thumbnail")
                .Register<TagsNode>("tags")
                .Deserialize<UploadNode>(text);
        }

        /// <summary>
        /// Returns value of the child node specified by its type. If value is null or empty returns data from child node's property specified by its name.
        /// </summary>
        /// <typeparam name="T">Type of the child node which must be found.</typeparam>
        /// <param name="node">Parent node where child node must be found.</param>
        /// <param name="propertyName">The name of child node's property where required data must be found.</param>
        /// <returns>Child node's value.</returns>
        public static string FindValue<T>(this DeserializerXml.Node node,string propertyName = null) where T : DeserializerXml.Node {
            var nodes = node.Find<T>();
            if(nodes != null && nodes.Any()) {
                var childNode = nodes.FirstOrDefault();
                var value = childNode.Value;
                if(!string.IsNullOrEmpty(value))
                    return value;
                var property = childNode.GetType().GetProperty(propertyName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance);
                if(property != null) {
                    var propertyValue = property.GetValue(childNode, null);
                    if(propertyValue is string propertyValueString)
                        return propertyValueString;
                }

            }
            return string.Empty;
        }

        /// <summary>
        /// Extracts the array of tags by searching node of 'TagsNode' type in provided node children.
        /// </summary>
        /// <param name="node">Provided node to search in.</param>
        /// <returns>Array of tags.</returns>
        public static string[] FindTags(this DeserializerXml.Node node) {
            var nodes = node.Find<TagsNode>();
            if(nodes != null && nodes.Any()) 
                return nodes.FirstOrDefault().GetTags();
            return new string[] { };
        }

        /// <summary>
        /// Node, which contains list of VideNode as children and additional information required for video uploading.
        /// </summary>
        public class UploadNode : DeserializerXml.Node {
            /// <summary>
            /// The name of your application registered in Google Cloud Platform.
            /// </summary>
            public string Application { get; set; }
            /// <summary>
            /// Path to the secret JSON file generated by Google Cloud Platform.
            /// </summary>
            public string Secret { get; set; }
            /// <summary>
            /// List of VideoNodes which must be uploaded on YouTube.
            /// </summary>
            public VideoNode[] Videos => Find<VideoNode>().ToArray();
        }

        /// <summary>
        /// Node, which contains data specific to each video.
        /// </summary>
        public class VideoNode : DeserializerXml.Node {
            /// <summary>
            /// Full path to video file.
            /// </summary>
            public string File { get; set; }
            /// <summary>
            /// Privacy mode specific to the video.
            /// </summary>
            public Privacies Privacy { get; set; }
            /// <summary>
            /// Category in which video must be published.
            /// </summary>
            public Categories Category { get; set; }
            /// <summary>
            /// Returns channel identifier where video must be uploaded.
            /// </summary>
            public string ChannelId => FindValue<ChannelNode>(this,"id");
            /// <summary>
            /// Title of the YouTube's video.
            /// </summary>
            public string Title => FindValue<TitleNode>(this);
            /// <summary>
            /// Description of the YouTube's video.
            /// </summary>
            public string Description => FindValue<DescriptionNode>(this);
            /// <summary>
            /// Path to the thumbnail (image file (jpg, png) which is less then 2 MB) of the specified video.
            /// </summary>
            public string Thumbnail => FindValue<ThumbnailNode>(this,"file");
            /// <summary>
            /// Returns true if video contains thumbnails.
            /// </summary>
            public bool HasThumbnail => !string.IsNullOrEmpty(Thumbnail);
            /// <summary>
            /// List of tags of the YouTube's video.
            /// </summary>
            public string[] Tags => FindTags(this);
        }

        /// <summary>
        /// Node, which contains channel ID value.
        /// If this node is not provided, then 'user' channel ID will be used (default for YouTube API).
        /// </summary>
        public class ChannelNode : DeserializerXml.Node {
            /// <summary>
            /// Channel ID value. Could also contain null or empty string. In that case, 'user' channel ID will be used.
            /// </summary>
            public string Id { get; set; }
        }

        /// <summary>
        /// Node, which contains value which will be used as YouTube's video title.
        /// </summary>
        public class TitleNode : DeserializerXml.Node { }

        /// <summary>
        /// Node, which contains value which will be used as YouTube's video description.
        /// </summary>
        public class DescriptionNode : DeserializerXml.Node { }

        /// <summary>
        /// Node, which contains path to the YouTube's video thumbnail image file.
        /// </summary>
        public class ThumbnailNode : DeserializerXml.Node {
            /// <summary>
            /// Contains path to the thumbnail (image file (jpg, png) which is less then 2 MB) of the specified video.
            /// </summary>
            public string File { get; set; }
        }

        /// <summary>
        /// Node, which contains tags separated by commas. 
        /// </summary>
        public class TagsNode : DeserializerXml.Node {
            /// <summary>
            /// Returns array of tags.
            /// </summary>
            /// <returns>Array of tags.</returns>
            public string[] GetTags() {
                if(string.IsNullOrEmpty(Value))
                    return new string[] { };
                return Value.Split(",", System.StringSplitOptions.RemoveEmptyEntries);
            }
        }
    }
}